<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Doom Inspired Game</title>
<style>
  body {
    margin: 0;
    overflow: hidden;
    background: #111;
    color: white;
    font-family: monospace;
  }
  #gameCanvas {
    display: block;
    background: #222;
    margin: 0 auto;
    border: 2px solid #555;
  }
</style>
</head>
<body>
<canvas id="gameCanvas" width="800" height="600"></canvas>
<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

const player = {
  x: 400,
  y: 300,
  width: 20,
  height: 20,
  speed: 4,
  color: 'red',
  bullets: []
};

const enemies = [];
const enemyCount = 5;

// Create enemies
for(let i = 0; i < enemyCount; i++){
  enemies.push({
    x: Math.random() * canvas.width,
    y: Math.random() * canvas.height,
    width: 20,
    height: 20,
    color: 'green',
    speed: 2
  });
}

// Controls
const keys = {};
document.addEventListener('keydown', (e) => keys[e.key] = true);
document.addEventListener('keyup', (e) => keys[e.key] = false);

canvas.addEventListener('click', (e) => {
  const rect = canvas.getBoundingClientRect();
  const mouseX = e.clientX - rect.left;
  const mouseY = e.clientY - rect.top;
  player.bullets.push({x: player.x+10, y: player.y+10, dx: (mouseX - player.x)/20, dy: (mouseY - player.y)/20});
});

function update() {
  // Player movement
  if(keys['w']) player.y -= player.speed;
  if(keys['s']) player.y += player.speed;
  if(keys['a']) player.x -= player.speed;
  if(keys['d']) player.x += player.speed;

  // Update bullets
  player.bullets.forEach((bullet, i) => {
    bullet.x += bullet.dx*5;
    bullet.y += bullet.dy*5;

    // Remove bullets out of bounds
    if(bullet.x < 0 || bullet.x > canvas.width || bullet.y < 0 || bullet.y > canvas.height){
      player.bullets.splice(i,1);
    }

    // Check collision with enemies
    enemies.forEach((enemy, j) => {
      if(bullet.x < enemy.x + enemy.width && bullet.x + 5 > enemy.x &&
         bullet.y < enemy.y + enemy.height && bullet.y + 5 > enemy.y){
        enemies.splice(j,1);
        player.bullets.splice(i,1);
      }
    });
  });

  // Enemy AI - simple movement towards player
  enemies.forEach(enemy => {
    if(enemy.x < player.x) enemy.x += enemy.speed;
    if(enemy.x > player.x) enemy.x -= enemy.speed;
    if(enemy.y < player.y) enemy.y += enemy.speed;
    if(enemy.y > player.y) enemy.y -= enemy.speed;
  });
}

function draw() {
  ctx.clearRect(0,0,canvas.width,canvas.height);

  // Draw player
  ctx.fillStyle = player.color;
  ctx.fillRect(player.x, player.y, player.width, player.height);

  // Draw bullets
  ctx.fillStyle = 'yellow';
  player.bullets.forEach(bullet => {
    ctx.fillRect(bullet.x, bullet.y, 5, 5);
  });

  // Draw enemies
  enemies.forEach(enemy => {
    ctx.fillStyle = enemy.color;
    ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);
  });
}

function gameLoop() {
  update();
  draw();
  requestAnimationFrame(gameLoop);
}

gameLoop();
</script>
</body>
</html>
